/* converted on Thu Sep 12, 2024, 11:21 (UTC-05) by bison-to-w3c v0.67 which is Copyright (c) 2011-2024 by Gunther Rademacher <grd@gmx.net> */

input    ::= line*
stmt_separator
         ::= NEWLINE
           | SEMICOLON
opt_newline
         ::= NEWLINE?
close_scope_ah
         ::=
close_scope_arp
         ::=
close_scope_at
         ::=
close_scope_comp
         ::=
close_scope_ct
         ::=
close_scope_counter
         ::=
close_scope_last
         ::=
close_scope_dccp
         ::=
close_scope_destroy
         ::=
close_scope_dst
         ::=
close_scope_dup
         ::=
close_scope_esp
         ::=
close_scope_eth
         ::=
close_scope_export
         ::=
close_scope_fib
         ::=
close_scope_frag
         ::=
close_scope_fwd
         ::=
close_scope_gre
         ::=
close_scope_hash
         ::=
close_scope_hbh
         ::=
close_scope_ip
         ::=
close_scope_ip6
         ::=
close_scope_vlan
         ::=
close_scope_icmp
         ::=
close_scope_igmp
         ::=
close_scope_import
         ::=
close_scope_ipsec
         ::=
close_scope_list
         ::=
close_scope_limit
         ::=
close_scope_meta
         ::=
close_scope_mh
         ::=
close_scope_monitor
         ::=
close_scope_nat
         ::=
close_scope_numgen
         ::=
close_scope_osf
         ::=
close_scope_policy
         ::=
close_scope_quota
         ::=
close_scope_queue
         ::=
close_scope_reject
         ::=
close_scope_reset
         ::=
close_scope_rt
         ::=
close_scope_sctp
         ::=
close_scope_sctp_chunk
         ::=
close_scope_secmark
         ::=
close_scope_socket
         ::=
close_scope_tcp
         ::=
close_scope_tproxy
         ::=
close_scope_type
         ::=
close_scope_th
         ::=
close_scope_udp
         ::=
close_scope_udplite
         ::=
close_scope_log
         ::=
close_scope_synproxy
         ::=
close_scope_xt
         ::=
common_block
         ::= ( INCLUDE QUOTED_STRING | ( DEFINE | REDEFINE ) identifier '=' initializer_expr | UNDEFINE identifier | error ) stmt_separator
line     ::= common_block
           | stmt_separator
           | base_cmd ( stmt_separator | TOKEN_EOF )
base_cmd ::= ADD? add_cmd
           | REPLACE replace_cmd
           | CREATE create_cmd
           | INSERT insert_cmd
           | DELETE delete_cmd
           | GET get_cmd
           | LIST list_cmd close_scope_list
           | RESET reset_cmd close_scope_reset
           | FLUSH flush_cmd
           | RENAME rename_cmd
           | IMPORT import_cmd close_scope_import
           | EXPORT export_cmd close_scope_export
           | MONITOR monitor_cmd close_scope_monitor
           | DESCRIBE describe_cmd
           | DESTROY destroy_cmd close_scope_destroy
add_cmd  ::= TABLE table_spec ( table_block_alloc '{' table_block '}' )?
           | CHAIN chain_spec ( chain_block_alloc '{' chain_block '}' )?
           | RULE? rule_position rule
           | ( SET set_spec set_block_alloc '{' set_block | MAP set_spec map_block_alloc '{' map_block | FLOWTABLE flowtable_spec flowtable_block_alloc '{' flowtable_block ) '}'
           | ELEMENT set_spec set_block_expr
           | COUNTER obj_spec ( counter_obj ( counter_config | '{' counter_block '}' ) )? close_scope_counter
           | QUOTA obj_spec quota_obj ( quota_config | '{' quota_block '}' ) close_scope_quota
           | CT ( HELPER obj_spec ct_obj_alloc '{' ct_helper_block | TIMEOUT obj_spec ct_obj_alloc '{' ct_timeout_block | EXPECTATION obj_spec ct_obj_alloc '{' ct_expect_block ) '}' close_scope_ct
           | LIMIT obj_spec limit_obj ( limit_config | '{' limit_block '}' ) close_scope_limit
           | SECMARK obj_spec secmark_obj ( secmark_config | '{' secmark_block '}' ) close_scope_secmark
           | SYNPROXY obj_spec synproxy_obj ( synproxy_config | '{' synproxy_block '}' ) close_scope_synproxy
replace_cmd
         ::= RULE ruleid_spec rule
create_cmd
         ::= TABLE table_spec ( table_block_alloc '{' table_block '}' )?
           | CHAIN chain_spec ( chain_block_alloc '{' chain_block '}' )?
           | ( SET set_spec set_block_alloc '{' set_block | MAP set_spec map_block_alloc '{' map_block | FLOWTABLE flowtable_spec flowtable_block_alloc '{' flowtable_block ) '}'
           | ELEMENT set_spec set_block_expr
           | COUNTER obj_spec ( counter_obj counter_config )? close_scope_counter
           | QUOTA obj_spec quota_obj quota_config close_scope_quota
           | CT ( HELPER obj_spec ct_obj_alloc '{' ct_helper_block | TIMEOUT obj_spec ct_obj_alloc '{' ct_timeout_block | EXPECTATION obj_spec ct_obj_alloc '{' ct_expect_block ) '}' close_scope_ct
           | LIMIT obj_spec limit_obj limit_config close_scope_limit
           | SECMARK obj_spec secmark_obj secmark_config close_scope_secmark
           | SYNPROXY obj_spec synproxy_obj synproxy_config close_scope_synproxy
insert_cmd
         ::= RULE rule_position rule
table_or_id_spec
         ::= table_spec
           | tableid_spec
chain_or_id_spec
         ::= chain_spec
           | chainid_spec
set_or_id_spec
         ::= set_spec
           | setid_spec
obj_or_id_spec
         ::= obj_spec
           | objid_spec
delete_cmd
         ::= TABLE table_or_id_spec
           | CHAIN ( chain_or_id_spec | chain_spec chain_block_alloc '{' chain_block '}' )
           | RULE ruleid_spec
           | SET set_or_id_spec
           | MAP set_spec
           | ELEMENT set_spec set_block_expr
           | FLOWTABLE ( flowtable_spec ( flowtable_block_alloc '{' flowtable_block '}' )? | flowtableid_spec )
           | COUNTER obj_or_id_spec close_scope_counter
           | QUOTA obj_or_id_spec close_scope_quota
           | CT ct_obj_type obj_spec ct_obj_alloc close_scope_ct
           | LIMIT obj_or_id_spec close_scope_limit
           | SECMARK obj_or_id_spec close_scope_secmark
           | SYNPROXY obj_or_id_spec close_scope_synproxy
destroy_cmd
         ::= TABLE table_or_id_spec
           | CHAIN chain_or_id_spec
           | RULE ruleid_spec
           | SET set_or_id_spec
           | MAP set_spec
           | ELEMENT set_spec set_block_expr
           | FLOWTABLE ( flowtable_spec ( flowtable_block_alloc '{' flowtable_block '}' )? | flowtableid_spec )
           | COUNTER obj_or_id_spec close_scope_counter
           | QUOTA obj_or_id_spec close_scope_quota
           | CT ct_obj_type obj_spec ct_obj_alloc close_scope_ct
           | LIMIT obj_or_id_spec close_scope_limit
           | SECMARK obj_or_id_spec close_scope_secmark
           | SYNPROXY obj_or_id_spec close_scope_synproxy
get_cmd  ::= ELEMENT set_spec set_block_expr
list_cmd ::= TABLE table_spec
           | ( TABLES | CHAINS | RULESET | METERS | FLOWTABLES | MAPS ) ruleset_spec
           | CHAIN chain_spec
           | ( SETS | COUNTERS | QUOTAS | LIMITS | SECMARKS | SYNPROXYS ) ( ruleset_spec | TABLE table_spec )
           | ( SET | METER | MAP ) set_spec
           | COUNTER obj_spec close_scope_counter
           | QUOTA obj_spec close_scope_quota
           | LIMIT obj_spec close_scope_limit
           | SECMARK obj_spec close_scope_secmark
           | SYNPROXY obj_spec close_scope_synproxy
           | FLOW ( TABLES ruleset_spec | TABLE set_spec )
           | FLOWTABLE flowtable_spec
           | CT ( ct_obj_type obj_spec | ct_cmd_type TABLE table_spec ) close_scope_ct
           | HOOKS basehook_spec
basehook_device_name
         ::= DEVICE STRING
basehook_spec
         ::= ruleset_spec basehook_device_name?
reset_cmd
         ::= ( COUNTERS | QUOTAS ) ( ruleset_spec | TABLE? table_spec )
           | COUNTER obj_spec close_scope_counter
           | QUOTA obj_spec close_scope_quota
           | RULES ( ruleset_spec | TABLE? table_spec | CHAIN? chain_spec )
           | RULE ruleid_spec
           | ELEMENT set_spec set_block_expr
           | ( SET | MAP ) set_or_id_spec
flush_cmd
         ::= TABLE table_spec
           | CHAIN chain_spec
           | ( SET | MAP | FLOW TABLE | METER ) set_spec
           | RULESET ruleset_spec
rename_cmd
         ::= CHAIN chain_spec identifier
import_cmd
         ::= RULESET? markup_format
export_cmd
         ::= RULESET? markup_format
monitor_cmd
         ::= monitor_event monitor_object monitor_format
monitor_event
         ::= STRING?
monitor_object
         ::= ( TABLES | CHAINS | SETS | RULES | ELEMENTS | RULESET | TRACE )?
monitor_format
         ::= markup_format?
markup_format
         ::= XML
           | VM? JSON
describe_cmd
         ::= primary_expr
table_block_alloc
         ::=
table_options
         ::= FLAGS table_flag ( COMMA table_flag )*
           | comment_spec
table_flag
         ::= STRING
table_block
         ::= ( common_block | ( table_options | ( CHAIN chain_identifier chain_block_alloc '{' chain_block | SET set_identifier set_block_alloc '{' set_block | MAP set_identifier map_block_alloc '{' map_block | FLOWTABLE flowtable_identifier flowtable_block_alloc '{' flowtable_block ) '}' )? stmt_separator | COUNTER obj_identifier obj_block_alloc '{' counter_block '}' stmt_separator close_scope_counter | QUOTA obj_identifier obj_block_alloc '{' quota_block '}' stmt_separator close_scope_quota | CT ( HELPER obj_identifier obj_block_alloc '{' ct_helper_block | TIMEOUT obj_identifier obj_block_alloc '{' ct_timeout_block | EXPECTATION obj_identifier obj_block_alloc '{' ct_expect_block ) '}' stmt_separator close_scope_ct | LIMIT obj_identifier obj_block_alloc '{' limit_block '}' stmt_separator close_scope_limit | SECMARK obj_identifier obj_block_alloc '{' secmark_block '}' stmt_separator close_scope_secmark | SYNPROXY obj_identifier obj_block_alloc '{' synproxy_block '}' stmt_separator close_scope_synproxy )*
chain_block_alloc
         ::=
chain_block
         ::= ( common_block | ( hook_spec | policy_spec | flags_spec | rule | DEVICES '=' flowtable_expr | comment_spec )? stmt_separator )*
typeof_verdict_expr
         ::= ( typeof_expr DOT )? primary_expr
typeof_data_expr
         ::= INTERVAL typeof_expr
           | typeof_verdict_expr
typeof_expr
         ::= primary_expr ( DOT primary_expr )*
set_block_alloc
         ::=
typeof_key_expr
         ::= TYPEOF typeof_expr
           | TYPE data_type_expr close_scope_type
set_block
         ::= ( common_block | ( typeof_key_expr | FLAGS set_flag_list | ( TIMEOUT | GC_INTERVAL ) time_spec | stateful_stmt_list | set_mechanism | comment_spec )? stmt_separator | ELEMENTS '=' set_block_expr | AUTOMERGE )*
set_block_expr
         ::= set_expr
           | variable_expr
set_flag_list
         ::= set_flag ( COMMA set_flag )*
set_flag ::= CONSTANT
           | INTERVAL
           | TIMEOUT
           | DYNAMIC
map_block_alloc
         ::=
ct_obj_type_map
         ::= TIMEOUT
           | EXPECTATION
map_block_obj_type
         ::= COUNTER close_scope_counter
           | QUOTA close_scope_quota
           | LIMIT close_scope_limit
           | SECMARK close_scope_secmark
           | SYNPROXY close_scope_synproxy
map_block_obj_typeof
         ::= map_block_obj_type
           | CT ct_obj_type_map close_scope_ct
map_block_data_interval
         ::= INTERVAL?
map_block
         ::= ( common_block | ( ( TIMEOUT | GC_INTERVAL ) time_spec | FLAGS set_flag_list | stateful_stmt_list | comment_spec | set_mechanism | TYPEOF typeof_expr COLON ( typeof_data_expr | map_block_obj_typeof ) )? stmt_separator | TYPE data_type_expr COLON ( map_block_data_interval data_type_expr | map_block_obj_type ) stmt_separator close_scope_type | ELEMENTS '=' set_block_expr )*
set_mechanism
         ::= POLICY set_policy_spec close_scope_policy
           | SIZE NUM
set_policy_spec
         ::= PERFORMANCE
           | MEMORY
flowtable_block_alloc
         ::=
flowtable_block
         ::= ( common_block | ( HOOK STRING prio_spec | DEVICES '=' flowtable_expr | FLAGS OFFLOAD )? stmt_separator | COUNTER close_scope_counter )*
flowtable_expr
         ::= '{' flowtable_expr_member ( COMMA ( flowtable_expr_member | opt_newline ) )* '}'
           | variable_expr
flowtable_expr_member
         ::= QUOTED_STRING
           | STRING
           | variable_expr
data_type_atom_expr
         ::= type_identifier
           | TIME
data_type_expr
         ::= data_type_atom_expr ( DOT data_type_atom_expr )*
obj_block_alloc
         ::=
counter_block
         ::= ( common_block | stmt_separator | counter_config | comment_spec )*
quota_block
         ::= ( common_block | stmt_separator | quota_config | comment_spec )*
ct_helper_block
         ::= ( common_block | stmt_separator | ct_helper_config | comment_spec )*
ct_timeout_block
         ::= ( common_block | stmt_separator | ct_timeout_config | comment_spec )*
ct_expect_block
         ::= ( common_block | stmt_separator | ct_expect_config | comment_spec )*
limit_block
         ::= ( common_block | stmt_separator | limit_config | comment_spec )*
secmark_block
         ::= ( common_block | stmt_separator | secmark_config | comment_spec )*
synproxy_block
         ::= ( common_block | stmt_separator | synproxy_config | comment_spec )*
type_identifier
         ::= STRING
           | MARK
           | DSCP
           | ECN
           | CLASSID
hook_spec
         ::= TYPE close_scope_type STRING HOOK STRING dev_spec prio_spec
prio_spec
         ::= PRIORITY extended_prio_spec
extended_prio_name
         ::= OUT
           | STRING
extended_prio_spec
         ::= int_num
           | variable_expr
           | extended_prio_name ( ( PLUS | DASH ) NUM )?
int_num  ::= DASH? NUM
dev_spec ::= ( DEVICE ( string | variable_expr ) | DEVICES '=' flowtable_expr )?
flags_spec
         ::= FLAGS OFFLOAD
policy_spec
         ::= POLICY policy_expr close_scope_policy
policy_expr
         ::= variable_expr
           | chain_policy
chain_policy
         ::= ACCEPT
           | DROP
identifier
         ::= STRING
           | LAST
string   ::= STRING
           | QUOTED_STRING
           | ASTERISK_STRING
time_spec
         ::= STRING
time_spec_or_num_s
         ::= NUM
           | time_spec
family_spec
         ::= family_spec_explicit?
family_spec_explicit
         ::= IP close_scope_ip
           | IP6 close_scope_ip6
           | INET
           | ARP close_scope_arp
           | BRIDGE
           | NETDEV
table_spec
         ::= family_spec identifier
tableid_spec
         ::= family_spec HANDLE NUM
chain_spec
         ::= table_spec identifier
chainid_spec
         ::= table_spec HANDLE NUM
chain_identifier
         ::= identifier
set_spec ::= table_spec identifier
setid_spec
         ::= table_spec HANDLE NUM
set_identifier
         ::= identifier
flowtable_spec
         ::= table_spec identifier
flowtableid_spec
         ::= table_spec HANDLE NUM
flowtable_identifier
         ::= identifier
obj_spec ::= table_spec identifier
objid_spec
         ::= table_spec HANDLE NUM
obj_identifier
         ::= identifier
handle_spec
         ::= HANDLE NUM
position_spec
         ::= POSITION NUM
index_spec
         ::= INDEX NUM
rule_position
         ::= chain_spec ( position_spec | handle_spec | index_spec )?
ruleid_spec
         ::= chain_spec handle_spec
comment_spec
         ::= COMMENT string
ruleset_spec
         ::= family_spec_explicit?
rule     ::= rule_alloc comment_spec?
rule_alloc
         ::= stmt+
stateful_stmt_list
         ::= stateful_stmt+
objref_stmt_counter
         ::= COUNTER NAME stmt_expr close_scope_counter
objref_stmt_limit
         ::= LIMIT NAME stmt_expr close_scope_limit
objref_stmt_quota
         ::= QUOTA NAME stmt_expr close_scope_quota
objref_stmt_synproxy
         ::= SYNPROXY NAME stmt_expr close_scope_synproxy
objref_stmt_ct
         ::= CT ( TIMEOUT | EXPECTATION ) SET stmt_expr close_scope_ct
objref_stmt
         ::= objref_stmt_counter
           | objref_stmt_limit
           | objref_stmt_quota
           | objref_stmt_synproxy
           | objref_stmt_ct
stateful_stmt
         ::= counter_stmt close_scope_counter
           | limit_stmt
           | quota_stmt
           | connlimit_stmt
           | last_stmt close_scope_last
stmt     ::= verdict_stmt
           | match_stmt
           | meter_stmt
           | payload_stmt
           | stateful_stmt
           | meta_stmt
           | log_stmt close_scope_log
           | reject_stmt close_scope_reject
           | ( nat_stmt | masq_stmt | redir_stmt ) close_scope_nat
           | tproxy_stmt close_scope_tproxy
           | queue_stmt
           | ct_stmt
           | dup_stmt close_scope_dup
           | fwd_stmt close_scope_fwd
           | set_stmt
           | map_stmt
           | synproxy_stmt close_scope_synproxy
           | chain_stmt
           | optstrip_stmt
           | xt_stmt close_scope_xt
           | objref_stmt
xt_stmt  ::= XT STRING string
chain_stmt_type
         ::= JUMP
           | GOTO
chain_stmt
         ::= chain_stmt_type chain_block_alloc '{' ( rule? stmt_separator )* '}'
verdict_stmt
         ::= verdict_expr
           | verdict_map_stmt
verdict_map_stmt
         ::= concat_expr VMAP verdict_map_expr
verdict_map_expr
         ::= '{' verdict_map_list_member_expr ( COMMA ( verdict_map_list_member_expr | opt_newline ) )* '}'
           | set_ref_expr
verdict_map_list_member_expr
         ::= opt_newline set_elem_expr COLON verdict_expr opt_newline
connlimit_stmt
         ::= CT COUNT OVER? NUM close_scope_ct
counter_stmt
         ::= counter_stmt_alloc counter_arg*
counter_stmt_alloc
         ::= COUNTER
counter_arg
         ::= ( PACKETS | BYTES ) NUM
last_stmt
         ::= LAST ( USED ( NEVER | time_spec ) )?
log_stmt ::= log_stmt_alloc log_arg*
log_stmt_alloc
         ::= LOG
log_arg  ::= PREFIX string
           | ( GROUP | SNAPLEN | QUEUE_THRESHOLD ) NUM
           | LEVEL level_type
           | FLAGS log_flags
level_type
         ::= string
log_flags
         ::= TCP log_flag_tcp ( COMMA log_flag_tcp )* close_scope_tcp
           | IP OPTIONS close_scope_ip
           | SKUID
           | ETHER close_scope_eth
           | ALL
log_flag_tcp
         ::= SEQUENCE
           | OPTIONS
limit_stmt
         ::= LIMIT RATE limit_mode ( limit_rate_pkts limit_burst_pkts | limit_rate_bytes limit_burst_bytes ) close_scope_limit
quota_mode
         ::= ( OVER | UNTIL )?
quota_unit
         ::= BYTES
           | STRING
quota_used
         ::= ( USED NUM quota_unit )?
quota_stmt
         ::= QUOTA quota_mode NUM quota_unit quota_used close_scope_quota
limit_mode
         ::= ( OVER | UNTIL )?
limit_burst_pkts
         ::= ( BURST NUM PACKETS )?
limit_rate_pkts
         ::= NUM SLASH time_unit
limit_burst_bytes
         ::= ( BURST limit_bytes )?
limit_rate_bytes
         ::= NUM STRING
           | limit_bytes SLASH time_unit
limit_bytes
         ::= NUM ( BYTES | STRING )
time_unit
         ::= SECOND
           | MINUTE
           | HOUR
           | DAY
           | WEEK
reject_stmt
         ::= reject_stmt_alloc reject_opts
reject_stmt_alloc
         ::= _REJECT
reject_with_expr
         ::= STRING
           | integer_expr
reject_opts
         ::= ( WITH ( ( ICMP | ICMP6 ) ( TYPE reject_with_expr close_scope_type close_scope_icmp | reject_with_expr ) | ICMPX ( TYPE reject_with_expr close_scope_type | reject_with_expr ) | TCP close_scope_tcp RESET close_scope_reset ) )?
nat_stmt ::= nat_stmt_alloc ( TO? ( stmt_expr? COLON )? | ( INTERVAL | PREFIX ) TO | nf_key_proto ( TO ( stmt_expr COLON )? | ( ADDR DOT PORT | INTERVAL | PREFIX ) TO ) ) stmt_expr nf_nat_flags*
nat_stmt_alloc
         ::= SNAT
           | DNAT
tproxy_stmt
         ::= TPROXY nf_key_proto? TO ( stmt_expr? COLON )? stmt_expr
synproxy_stmt
         ::= synproxy_stmt_alloc synproxy_arg*
synproxy_stmt_alloc
         ::= SYNPROXY
synproxy_arg
         ::= ( MSS | WSCALE ) NUM
           | TIMESTAMP
           | SACK_PERM
synproxy_config
         ::= MSS NUM ( WSCALE NUM | stmt_separator WSCALE NUM stmt_separator ) synproxy_ts synproxy_sack
synproxy_obj
         ::=
synproxy_ts
         ::= TIMESTAMP?
synproxy_sack
         ::= SACK_PERM?
primary_stmt_expr
         ::= symbol_expr
           | integer_expr
           | boolean_expr
           | meta_expr
           | rt_expr
           | ct_expr
           | numgen_expr
           | hash_expr
           | payload_expr
           | keyword_expr
           | socket_expr
           | osf_expr
           | '(' basic_stmt_expr ')'
shift_stmt_expr
         ::= primary_stmt_expr ( ( LSHIFT | RSHIFT ) primary_stmt_expr )*
and_stmt_expr
         ::= shift_stmt_expr ( AMPERSAND shift_stmt_expr )*
exclusive_or_stmt_expr
         ::= and_stmt_expr ( CARET and_stmt_expr )*
basic_stmt_expr
         ::= exclusive_or_stmt_expr ( '|' exclusive_or_stmt_expr )*
concat_stmt_expr
         ::= basic_stmt_expr ( DOT primary_stmt_expr )*
map_stmt_expr_set
         ::= set_expr
           | set_ref_expr
map_stmt_expr
         ::= concat_stmt_expr ( MAP map_stmt_expr_set )?
prefix_stmt_expr
         ::= basic_stmt_expr SLASH NUM
range_stmt_expr
         ::= basic_stmt_expr DASH basic_stmt_expr
multiton_stmt_expr
         ::= prefix_stmt_expr
           | range_stmt_expr
stmt_expr
         ::= map_stmt_expr
           | multiton_stmt_expr
           | symbol_stmt_expr ( COMMA symbol_stmt_expr )+
masq_stmt
         ::= masq_stmt_alloc masq_stmt_args?
masq_stmt_alloc
         ::= MASQUERADE
masq_stmt_args
         ::= TO COLON stmt_expr nf_nat_flags?
           | nf_nat_flags
redir_stmt
         ::= redir_stmt_alloc redir_stmt_arg?
redir_stmt_alloc
         ::= REDIRECT
redir_stmt_arg
         ::= TO COLON? stmt_expr nf_nat_flags?
           | nf_nat_flags
dup_stmt ::= DUP TO stmt_expr ( DEVICE stmt_expr )?
fwd_stmt ::= FWD ( TO | nf_key_proto TO stmt_expr DEVICE ) stmt_expr
nf_nat_flags
         ::= nf_nat_flag ( COMMA nf_nat_flag )*
nf_nat_flag
         ::= RANDOM
           | FULLY_RANDOM
           | PERSISTENT
queue_stmt
         ::= ( queue_stmt_compat | QUEUE ( TO queue_stmt_expr | FLAGS queue_stmt_flags ( TO queue_stmt_expr | QUEUENUM queue_stmt_expr_simple ) ) ) close_scope_queue
queue_stmt_compat
         ::= queue_stmt_alloc queue_stmt_arg*
queue_stmt_alloc
         ::= QUEUE
queue_stmt_arg
         ::= QUEUENUM queue_stmt_expr_simple
           | queue_stmt_flags
queue_expr
         ::= variable_expr
           | integer_expr
queue_stmt_expr_simple
         ::= integer_expr
           | variable_expr
           | queue_expr DASH queue_expr
queue_stmt_expr
         ::= numgen_expr
           | hash_expr
           | map_expr
           | queue_stmt_expr_simple
queue_stmt_flags
         ::= queue_stmt_flag ( COMMA queue_stmt_flag )*
queue_stmt_flag
         ::= BYPASS
           | FANOUT
set_elem_expr_stmt
         ::= set_elem_expr_stmt_alloc set_elem_options?
set_elem_expr_stmt_alloc
         ::= concat_expr
set_stmt ::= SET set_stmt_op set_elem_expr_stmt set_ref_expr
           | set_stmt_op set_ref_expr '{' set_elem_expr_stmt stateful_stmt_list? '}'
set_stmt_op
         ::= ADD
           | UPDATE
           | DELETE
map_stmt ::= set_stmt_op set_ref_expr '{' set_elem_expr_stmt stateful_stmt_list? COLON set_elem_expr_stmt '}'
meter_stmt
         ::= meter_stmt_alloc
meter_stmt_alloc
         ::= METER identifier ( SIZE NUM )? '{' meter_key_expr stmt '}'
match_stmt
         ::= relational_expr
variable_expr
         ::= '$' identifier
symbol_expr
         ::= variable_expr
           | string
set_ref_expr
         ::= set_ref_symbol_expr
           | variable_expr
set_ref_symbol_expr
         ::= AT identifier close_scope_at
integer_expr
         ::= NUM
primary_expr
         ::= symbol_expr
           | integer_expr
           | payload_expr
           | exthdr_expr
           | exthdr_exists_expr
           | meta_expr
           | socket_expr
           | rt_expr
           | ct_expr
           | numgen_expr
           | hash_expr
           | fib_expr
           | osf_expr
           | xfrm_expr
           | '(' basic_expr ')'
fib_expr ::= FIB fib_flag ( DOT fib_flag )* fib_result close_scope_fib
fib_result
         ::= OIF
           | OIFNAME
           | TYPE close_scope_type
fib_flag ::= SADDR
           | DADDR
           | MARK
           | IIF
           | OIF
osf_expr ::= OSF osf_ttl ( HDRVERSION | NAME ) close_scope_osf
osf_ttl  ::= ( TTL STRING )?
basic_expr
         ::= primary_expr ( ( LSHIFT | RSHIFT ) primary_rhs_expr )* ( AMPERSAND shift_rhs_expr )* ( CARET and_rhs_expr )* ( '|' exclusive_or_rhs_expr )*
concat_expr
         ::= basic_expr ( DOT basic_expr )*
prefix_rhs_expr
         ::= basic_rhs_expr SLASH NUM
range_rhs_expr
         ::= basic_rhs_expr DASH basic_rhs_expr
multiton_rhs_expr
         ::= prefix_rhs_expr
           | range_rhs_expr
map_expr ::= concat_expr MAP rhs_expr
expr     ::= concat_expr
           | set_expr
           | map_expr
set_expr ::= '{' set_list_member_expr ( COMMA ( set_list_member_expr | opt_newline ) )* '}'
set_list_member_expr
         ::= opt_newline ( set_expr | set_elem_expr ( COLON set_rhs_expr )? ) opt_newline
meter_key_expr
         ::= meter_key_expr_alloc set_elem_options?
meter_key_expr_alloc
         ::= concat_expr
set_elem_expr
         ::= set_elem_expr_alloc ( set_elem_expr_options set_elem_stmt_list? )?
set_elem_key_expr
         ::= set_lhs_expr
           | ASTERISK
set_elem_expr_alloc
         ::= set_elem_key_expr set_elem_stmt_list?
set_elem_options
         ::= set_elem_option+
set_elem_option
         ::= ( TIMEOUT | EXPIRES ) time_spec
           | comment_spec
set_elem_expr_options
         ::= set_elem_expr_option+
set_elem_stmt_list
         ::= set_elem_stmt+
set_elem_stmt
         ::= COUNTER ( PACKETS NUM BYTES NUM )? close_scope_counter
           | LIMIT RATE limit_mode ( limit_rate_pkts limit_burst_pkts | limit_rate_bytes limit_burst_bytes ) close_scope_limit
           | CT COUNT OVER? NUM close_scope_ct
           | QUOTA quota_mode NUM quota_unit quota_used close_scope_quota
           | LAST USED ( NEVER | time_spec ) close_scope_last
set_elem_expr_option
         ::= ( TIMEOUT | EXPIRES ) time_spec
           | comment_spec
set_lhs_expr
         ::= concat_rhs_expr
set_rhs_expr
         ::= concat_rhs_expr
           | verdict_expr
initializer_expr
         ::= rhs_expr
           | list_rhs_expr
           | '{' '}'
           | DASH NUM
counter_config
         ::= PACKETS NUM BYTES NUM
counter_obj
         ::=
quota_config
         ::= quota_mode NUM quota_unit quota_used
quota_obj
         ::=
secmark_config
         ::= string
secmark_obj
         ::=
ct_obj_type
         ::= HELPER
           | TIMEOUT
           | EXPECTATION
ct_cmd_type
         ::= HELPERS
           | TIMEOUT
           | EXPECTATION
ct_l4protoname
         ::= TCP close_scope_tcp
           | UDP close_scope_udp
ct_helper_config
         ::= TYPE QUOTED_STRING PROTOCOL ct_l4protoname stmt_separator close_scope_type
           | L3PROTOCOL family_spec_explicit stmt_separator
timeout_state
         ::= STRING COLON time_spec_or_num_s
ct_timeout_config
         ::= ( PROTOCOL ct_l4protoname | L3PROTOCOL family_spec_explicit ) stmt_separator
           | POLICY '=' '{' timeout_state ( COMMA timeout_state )* '}' stmt_separator close_scope_policy
ct_expect_config
         ::= ( PROTOCOL ct_l4protoname | ( DPORT | SIZE ) NUM | TIMEOUT time_spec | L3PROTOCOL family_spec_explicit ) stmt_separator
ct_obj_alloc
         ::=
limit_config
         ::= RATE limit_mode ( limit_rate_pkts limit_burst_pkts | limit_rate_bytes limit_burst_bytes )
limit_obj
         ::=
relational_expr
         ::= expr relational_op? ( ( ( basic_rhs_expr | list_rhs_expr ) SLASH )? list_rhs_expr | rhs_expr )
list_rhs_expr
         ::= basic_rhs_expr ( COMMA basic_rhs_expr )+
rhs_expr ::= concat_rhs_expr
           | set_expr
           | set_ref_symbol_expr
shift_rhs_expr
         ::= primary_rhs_expr ( ( LSHIFT | RSHIFT ) primary_rhs_expr )*
and_rhs_expr
         ::= shift_rhs_expr ( AMPERSAND shift_rhs_expr )*
exclusive_or_rhs_expr
         ::= and_rhs_expr ( CARET and_rhs_expr )*
basic_rhs_expr
         ::= exclusive_or_rhs_expr ( '|' exclusive_or_rhs_expr )*
concat_rhs_expr
         ::= ( basic_rhs_expr | multiton_rhs_expr ) ( DOT ( multiton_rhs_expr | basic_rhs_expr ) )*
boolean_keys
         ::= EXISTS
           | MISSING
boolean_expr
         ::= boolean_keys
keyword_expr
         ::= ETHER close_scope_eth
           | IP close_scope_ip
           | IP6 close_scope_ip6
           | VLAN close_scope_vlan
           | ARP close_scope_arp
           | ( DNAT | SNAT ) close_scope_nat
           | ECN
           | RESET close_scope_reset
           | DESTROY close_scope_destroy
           | ORIGINAL
           | REPLY
           | LABEL
           | LAST close_scope_last
primary_rhs_expr
         ::= symbol_expr
           | integer_expr
           | boolean_expr
           | keyword_expr
           | TCP close_scope_tcp
           | UDP close_scope_udp
           | UDPLITE close_scope_udplite
           | ESP close_scope_esp
           | AH close_scope_ah
           | ( ICMP | ICMP6 ) close_scope_icmp
           | IGMP
           | GRE close_scope_gre
           | COMP close_scope_comp
           | DCCP close_scope_dccp
           | SCTP close_scope_sctp
           | REDIRECT close_scope_nat
           | '(' basic_rhs_expr ')'
relational_op
         ::= EQ
           | NEQ
           | LT
           | GT
           | GTE
           | LTE
           | NOT
verdict_expr
         ::= ACCEPT
           | DROP
           | CONTINUE
           | ( JUMP | GOTO ) chain_expr
           | RETURN
chain_expr
         ::= variable_expr
           | identifier
meta_expr
         ::= META ( meta_key | STRING ) close_scope_meta
           | meta_key_unqualified
meta_key ::= meta_key_qualified
           | meta_key_unqualified
meta_key_qualified
         ::= LENGTH
           | PROTOCOL
           | PRIORITY
           | RANDOM
           | SECMARK close_scope_secmark
meta_key_unqualified
         ::= MARK
           | IIF
           | IIFNAME
           | IIFTYPE
           | OIF
           | OIFNAME
           | OIFTYPE
           | SKUID
           | SKGID
           | NFTRACE
           | RTCLASSID
           | IBRIPORT
           | OBRIPORT
           | IBRIDGENAME
           | OBRIDGENAME
           | PKTTYPE
           | CPU
           | IIFGROUP
           | OIFGROUP
           | CGROUP
           | IPSEC close_scope_ipsec
           | TIME
           | DAY
           | HOUR
meta_stmt
         ::= META ( meta_key | STRING ) SET stmt_expr close_scope_meta
           | meta_key_unqualified SET stmt_expr
           | NOTRACK
           | FLOW ( OFFLOAD | ADD ) AT string close_scope_at
socket_expr
         ::= SOCKET ( socket_key | CGROUPV2 LEVEL NUM ) close_scope_socket
socket_key
         ::= TRANSPARENT
           | MARK
           | WILDCARD
offset_opt
         ::= ( OFFSET NUM )?
numgen_type
         ::= INC
           | RANDOM
numgen_expr
         ::= NUMGEN numgen_type MOD NUM offset_opt close_scope_numgen
xfrm_spnum
         ::= ( SPNUM NUM )?
xfrm_dir ::= IN
           | OUT
xfrm_state_key
         ::= SPI
           | REQID
xfrm_state_proto_key
         ::= DADDR
           | SADDR
xfrm_expr
         ::= IPSEC xfrm_dir xfrm_spnum ( xfrm_state_key | nf_key_proto xfrm_state_proto_key ) close_scope_ipsec
hash_expr
         ::= ( JHASH expr MOD ( NUM SEED )? | SYMHASH MOD ) NUM offset_opt close_scope_hash
nf_key_proto
         ::= IP close_scope_ip
           | IP6 close_scope_ip6
rt_expr  ::= RT nf_key_proto? rt_key close_scope_rt
rt_key   ::= CLASSID
           | NEXTHOP
           | MTU
           | IPSEC close_scope_ipsec
ct_expr  ::= CT ( ct_key | ct_dir ( ct_key_dir | ct_key_proto_field ) ) close_scope_ct
ct_dir   ::= ORIGINAL
           | REPLY
ct_key   ::= L3PROTOCOL
           | PROTOCOL
           | MARK
           | STATE
           | DIRECTION
           | STATUS
           | EXPIRATION
           | HELPER
           | SADDR
           | DADDR
           | PROTO_SRC
           | PROTO_DST
           | LABEL
           | EVENT
           | SECMARK close_scope_secmark
           | ID
           | ct_key_dir_optional
ct_key_dir
         ::= SADDR
           | DADDR
           | L3PROTOCOL
           | PROTOCOL
           | PROTO_SRC
           | PROTO_DST
           | ct_key_dir_optional
ct_key_proto_field
         ::= IP ( SADDR | DADDR ) close_scope_ip
           | IP6 ( SADDR | DADDR ) close_scope_ip6
ct_key_dir_optional
         ::= BYTES
           | PACKETS
           | AVGPKT
           | ZONE
symbol_stmt_expr
         ::= symbol_expr
           | keyword_expr
ct_stmt  ::= CT ( ct_key | ct_dir ct_key_dir_optional ) SET stmt_expr close_scope_ct
payload_stmt
         ::= payload_expr SET stmt_expr
payload_expr
         ::= payload_raw_expr
           | eth_hdr_expr
           | vlan_hdr_expr
           | arp_hdr_expr
           | ip_hdr_expr
           | icmp_hdr_expr
           | igmp_hdr_expr
           | ip6_hdr_expr
           | icmp6_hdr_expr
           | auth_hdr_expr
           | esp_hdr_expr
           | comp_hdr_expr
           | udp_hdr_expr
           | udplite_hdr_expr
           | tcp_hdr_expr close_scope_tcp
           | dccp_hdr_expr
           | sctp_hdr_expr
           | th_hdr_expr
           | vxlan_hdr_expr
           | geneve_hdr_expr
           | gre_hdr_expr
           | gretap_hdr_expr
payload_raw_len
         ::= NUM
payload_raw_expr
         ::= AT payload_base_spec COMMA NUM COMMA payload_raw_len close_scope_at
payload_base_spec
         ::= LL_HDR
           | NETWORK_HDR
           | TRANSPORT_HDR close_scope_th
           | STRING
eth_hdr_expr
         ::= ETHER eth_hdr_field close_scope_eth
eth_hdr_field
         ::= SADDR
           | DADDR
           | TYPE close_scope_type
vlan_hdr_expr
         ::= VLAN vlan_hdr_field close_scope_vlan
vlan_hdr_field
         ::= ID
           | CFI
           | DEI
           | PCP
           | TYPE close_scope_type
arp_hdr_expr
         ::= ARP arp_hdr_field close_scope_arp
arp_hdr_field
         ::= HTYPE
           | PTYPE
           | HLEN
           | PLEN
           | OPERATION
           | ( SADDR | DADDR ) ( ETHER close_scope_eth | IP close_scope_ip )
ip_hdr_expr
         ::= IP ( ip_hdr_field | OPTION ip_option_type ip_option_field? ) close_scope_ip
ip_hdr_field
         ::= HDRVERSION
           | HDRLENGTH
           | DSCP
           | ECN
           | LENGTH
           | ID
           | FRAG_OFF
           | TTL
           | PROTOCOL
           | CHECKSUM
           | SADDR
           | DADDR
ip_option_type
         ::= LSRR
           | RR
           | SSRR
           | RA
ip_option_field
         ::= TYPE close_scope_type
           | LENGTH
           | VALUE
           | PTR
           | ADDR
icmp_hdr_expr
         ::= ICMP icmp_hdr_field close_scope_icmp
icmp_hdr_field
         ::= TYPE close_scope_type
           | CODE
           | CHECKSUM
           | ID
           | SEQUENCE
           | GATEWAY
           | MTU
igmp_hdr_expr
         ::= IGMP igmp_hdr_field close_scope_igmp
igmp_hdr_field
         ::= TYPE close_scope_type
           | CHECKSUM
           | MRT
           | GROUP
ip6_hdr_expr
         ::= IP6 ip6_hdr_field close_scope_ip6
ip6_hdr_field
         ::= HDRVERSION
           | DSCP
           | ECN
           | FLOWLABEL
           | LENGTH
           | NEXTHDR
           | HOPLIMIT
           | SADDR
           | DADDR
icmp6_hdr_expr
         ::= ICMP6 icmp6_hdr_field close_scope_icmp
icmp6_hdr_field
         ::= TYPE close_scope_type
           | CODE
           | CHECKSUM
           | PPTR
           | MTU
           | ID
           | SEQUENCE
           | MAXDELAY
           | TADDR
           | DADDR
auth_hdr_expr
         ::= AH auth_hdr_field close_scope_ah
auth_hdr_field
         ::= NEXTHDR
           | HDRLENGTH
           | RESERVED
           | SPI
           | SEQUENCE
esp_hdr_expr
         ::= ESP esp_hdr_field close_scope_esp
esp_hdr_field
         ::= SPI
           | SEQUENCE
comp_hdr_expr
         ::= COMP comp_hdr_field close_scope_comp
comp_hdr_field
         ::= NEXTHDR
           | FLAGS
           | CPI
udp_hdr_expr
         ::= UDP udp_hdr_field close_scope_udp
udp_hdr_field
         ::= SPORT
           | DPORT
           | LENGTH
           | CHECKSUM
udplite_hdr_expr
         ::= UDPLITE udplite_hdr_field close_scope_udplite
udplite_hdr_field
         ::= SPORT
           | DPORT
           | CSUMCOV
           | CHECKSUM
tcp_hdr_expr
         ::= TCP ( tcp_hdr_field | OPTION ( tcp_hdr_option_type | tcp_hdr_option_kind_and_field | AT close_scope_at tcp_hdr_option_type COMMA NUM COMMA payload_raw_len ) )
inner_inet_expr
         ::= ip_hdr_expr
           | icmp_hdr_expr
           | igmp_hdr_expr
           | ip6_hdr_expr
           | icmp6_hdr_expr
           | auth_hdr_expr
           | esp_hdr_expr
           | comp_hdr_expr
           | udp_hdr_expr
           | udplite_hdr_expr
           | tcp_hdr_expr close_scope_tcp
           | dccp_hdr_expr
           | sctp_hdr_expr
           | th_hdr_expr
inner_eth_expr
         ::= eth_hdr_expr
           | vlan_hdr_expr
           | arp_hdr_expr
inner_expr
         ::= inner_eth_expr
           | inner_inet_expr
vxlan_hdr_expr
         ::= VXLAN ( vxlan_hdr_field | inner_expr )
vxlan_hdr_field
         ::= VNI
           | FLAGS
geneve_hdr_expr
         ::= GENEVE ( geneve_hdr_field | inner_expr )
geneve_hdr_field
         ::= VNI
           | TYPE
gre_hdr_expr
         ::= GRE ( gre_hdr_field close_scope_gre | close_scope_gre inner_inet_expr )
gre_hdr_field
         ::= HDRVERSION
           | FLAGS
           | PROTOCOL
gretap_hdr_expr
         ::= GRETAP close_scope_gre inner_expr
optstrip_stmt
         ::= RESET TCP OPTION tcp_hdr_option_type close_scope_tcp
tcp_hdr_field
         ::= SPORT
           | DPORT
           | SEQUENCE
           | ACKSEQ
           | DOFF
           | RESERVED
           | FLAGS
           | WINDOW
           | CHECKSUM
           | URGPTR
tcp_hdr_option_kind_and_field
         ::= MSS tcpopt_field_maxseg
           | tcp_hdr_option_sack tcpopt_field_sack
           | WINDOW tcpopt_field_window
           | TIMESTAMP tcpopt_field_tsopt
           | tcp_hdr_option_type LENGTH
           | MPTCP tcpopt_field_mptcp
tcp_hdr_option_sack
         ::= SACK
           | SACK0
           | SACK1
           | SACK2
           | SACK3
tcp_hdr_option_type
         ::= ECHO
           | EOL
           | FASTOPEN
           | MD5SIG
           | MPTCP
           | MSS
           | NOP
           | SACK_PERM
           | TIMESTAMP
           | WINDOW
           | tcp_hdr_option_sack
           | NUM
tcpopt_field_sack
         ::= LEFT
           | RIGHT
tcpopt_field_window
         ::= COUNT
tcpopt_field_tsopt
         ::= TSVAL
           | TSECR
tcpopt_field_maxseg
         ::= SIZE
tcpopt_field_mptcp
         ::= SUBTYPE
dccp_hdr_expr
         ::= DCCP ( dccp_hdr_field | OPTION NUM ) close_scope_dccp
dccp_hdr_field
         ::= SPORT
           | DPORT
           | TYPE close_scope_type
sctp_chunk_type
         ::= DATA
           | INIT
           | INIT_ACK
           | SACK
           | HEARTBEAT
           | HEARTBEAT_ACK
           | ABORT
           | SHUTDOWN
           | SHUTDOWN_ACK
           | ERROR
           | COOKIE_ECHO
           | COOKIE_ACK
           | ECNE
           | CWR
           | SHUTDOWN_COMPLETE
           | ASCONF_ACK
           | FORWARD_TSN
           | ASCONF
sctp_chunk_common_field
         ::= TYPE close_scope_type
           | FLAGS
           | LENGTH
sctp_chunk_data_field
         ::= TSN
           | STREAM
           | SSN
           | PPID
sctp_chunk_init_field
         ::= INIT_TAG
           | A_RWND
           | NUM_OSTREAMS
           | NUM_ISTREAMS
           | INIT_TSN
sctp_chunk_sack_field
         ::= CUM_TSN_ACK
           | A_RWND
           | NUM_GACK_BLOCKS
           | NUM_DUP_TSNS
sctp_chunk_alloc
         ::= sctp_chunk_type sctp_chunk_common_field?
           | DATA sctp_chunk_data_field
           | ( INIT | INIT_ACK ) sctp_chunk_init_field
           | SACK sctp_chunk_sack_field
           | SHUTDOWN CUM_TSN_ACK
           | ( ECNE | CWR ) LOWEST_TSN
           | ( ASCONF_ACK | ASCONF ) SEQNO
           | FORWARD_TSN NEW_CUM_TSN
sctp_hdr_expr
         ::= SCTP ( sctp_hdr_field | CHUNK sctp_chunk_alloc close_scope_sctp_chunk ) close_scope_sctp
sctp_hdr_field
         ::= SPORT
           | DPORT
           | VTAG
           | CHECKSUM
th_hdr_expr
         ::= TRANSPORT_HDR th_hdr_field close_scope_th
th_hdr_field
         ::= SPORT
           | DPORT
exthdr_expr
         ::= hbh_hdr_expr
           | rt_hdr_expr
           | rt0_hdr_expr
           | rt2_hdr_expr
           | rt4_hdr_expr
           | frag_hdr_expr
           | dst_hdr_expr
           | mh_hdr_expr
hbh_hdr_expr
         ::= HBH hbh_hdr_field close_scope_hbh
hbh_hdr_field
         ::= NEXTHDR
           | HDRLENGTH
rt_hdr_expr
         ::= RT rt_hdr_field close_scope_rt
rt_hdr_field
         ::= NEXTHDR
           | HDRLENGTH
           | TYPE close_scope_type
           | SEG_LEFT
rt0_hdr_expr
         ::= RT0 rt0_hdr_field close_scope_rt
rt0_hdr_field
         ::= ADDR '[' NUM ']'
rt2_hdr_expr
         ::= RT2 rt2_hdr_field close_scope_rt
rt2_hdr_field
         ::= ADDR
rt4_hdr_expr
         ::= RT4 rt4_hdr_field close_scope_rt
rt4_hdr_field
         ::= LAST_ENT
           | FLAGS
           | TAG
           | SID '[' NUM ']'
frag_hdr_expr
         ::= FRAG frag_hdr_field close_scope_frag
frag_hdr_field
         ::= NEXTHDR
           | RESERVED
           | FRAG_OFF
           | RESERVED2
           | MORE_FRAGMENTS
           | ID
dst_hdr_expr
         ::= DST dst_hdr_field close_scope_dst
dst_hdr_field
         ::= NEXTHDR
           | HDRLENGTH
mh_hdr_expr
         ::= MH mh_hdr_field close_scope_mh
mh_hdr_field
         ::= NEXTHDR
           | HDRLENGTH
           | TYPE close_scope_type
           | RESERVED
           | CHECKSUM
exthdr_exists_expr
         ::= EXTHDR exthdr_key
exthdr_key
         ::= HBH close_scope_hbh
           | RT close_scope_rt
           | FRAG close_scope_frag
           | DST close_scope_dst
           | MH close_scope_mh
