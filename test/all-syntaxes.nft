#!/usr/sbin/nft -f
# File: all-syntaxes.nft
# Description: A test NFT file to exercise all Vim syntax highlightings.
#
# This is the part where you can add your own esoteric setting(s) if it breaks
# the vim syntax highlighter for NFTABLES (yet `nft` takes it in just normally).
# TODO: More todo, FIXME, FIXME: TODO: xxx XXX ARGH!
#
# include ";;;;;;;;;;";
# include "Fil'espec"
# include "Filespec"
# include "Filespec"     
# include "Filespec";
# include "Filespec" ;
# include "Filespec";   
# include "Filespec"  ;
# include "Filespec"  ;   
# include "Filespec"# inline comment
# include "Filespec"        # inline comment
# include "Filespec";   # inline comment
# include "Filespec";      # inline comment
# include "Filespec???<>|\~`!@#$%^&*()\=+{}] /;:,._0123abcXYZ"  ;   # inline comment
# include "Filespec"  ;      # inline comment

monitor tables
monitor chains
monitor sets
monitor rules
monitor elements
monitor trace

monitor tables json;
monitor chains json
monitor sets json
monitor rules json
monitor elements json
monitor trace json

monitor new 
monitor new tables 
monitor new chains
monitor new sets
monitor new rules
monitor new elements 
monitor new trace 

flush chain myIpTable myIpChain
flush chain netdev myNetdev myNetdevChain
flush chain bridge myBridge myBridgeChain
flush chain arp myArp myArpChain
flush chain ip myIp myIpChain
flush chain ip6 myIp6 myIp6Chain
flush chain inet myInet myInetChain

flush table myArpTable
flush table netdev TABLE_NETDEV
flush table bridge myBridgeTable
flush table arp myArpTable
flush table ip myIpTable
flush table ip6 myIp6Table
flush table inet myInetTable

flush ruleset
flush ruleset netdev
flush ruleset bridge
flush ruleset arp
flush ruleset ip
flush ruleset ip6
flush ruleset inet

#  create Similar to the add command, but returns 
#  an error if the chain already exists.
create table myIpTable 
create table my.IpTable
create table my/IpTable
create table my_IpTable
create table my./_IpTable
create table myIpTable { flags dormant; }
create table netdev myNetdev 
create table netdev myNetdev { flags dormant; }
create table bridge myBridge 
create table bridge myBridge { flags dormant; }
create table arp myArpTable 
create table arp myArpTable { flags dormant; }
create table ip myIpTable 
create table ip myIpTable { flags dormant; }
create table ip6 myIp6Table 
create table ip6 myIp6Table { flags dormant; }
create table inet myInetTable 
create table inet myInetTable { flags dormant; }

add table myIpTable    # defaults to 'ip' family
add table my_IpTable    # defaults to 'ip' family
add table my.IpTable    # defaults to 'ip' family
add table my/IpTable    # defaults to 'ip' family
add table myIpTable { flags dormant;  }    # defaults to 'ip' family
# add table netdev myNetdevTable
# add table netdev myNetdevTable { flags dormant; }
add table bridge myBridgeTable
add table bridge myBridgeTable { flags dormant; }
add table arp myArpTable 
add table arp myArpTable { flags dormant; }
add table ip myIpTable
add table ip myIpTable { flags dormant; }
add table ip6 myIp6Table
add table ip6 myIp6Table { flags dormant; }
add table inet myInetTable
add table inet myInetTable { flags dormant; };

# Two kinds of a base chain for syntax handling:
#  1. Unidentified family chain
#  2. Explictly-identified family chain
create chain myIpTable myIpChain
create chain myIpTable myIpChain { type filter hook prerouting priority 0; policy drop; } ;
create chain myIpTable myIpChain { type filter hook input priority 0; policy drop;}
create chain myIpTable myIpChain { type filter hook forward priority 0; policy drop;}
create chain myIpTable myIpChain { type filter hook output priority 0; policy drop;}
create chain myIpTable myIpChain { type filter hook postrouting priority 0; policy drop;}
create chain myIpTable myIpChain { type filter hook input device eth0 priority 0; policy drop;}
create chain arp myArpTable myArpChain 
create chain arp myArpTable myArpChain { type filter hook input priority 0; policy accept}
create chain arp myArpTable myArpChain { type filter hook output priority 0; policy accept}
create chain arp myArpTable myArpChain { type filter hook input device "eth0" priority 0; policy accept}
create chain bridge myBridgeTable myBridgeChain 
create chain bridge myBridgeTable myBridgeChain { type filter hook input priority 0; policy accept}
create chain bridge myBridgeTable myBridgeChain { type filter hook output priority 0; policy accept}
create chain bridge myBridgeTable myBridgeChain { type filter hook input device "eth0" priority 0; policy accept}
create chain netdev myNetdevTable myNetdevChain 
create chain netdev myNetdevTable myNetdevChain { type filter hook ingress device "vlan0" priority 0; policy accept}
create chain ip myIpTable myIpChain 
create chain ip myIpTable myIpChain { type filter hook prerouting priority 0; policy accept}
create chain ip myIpTable myIpChain { type filter hook input priority 0; policy accept}
create chain ip myIpTable myIpChain { type filter hook forward priority 0; policy accept}
create chain ip myIpTable myIpChain { type filter hook output priority 0; policy accept}
create chain ip myIpTable myIpChain { type filter hook postrouting priority 0; policy accept}
create chain ip myIpTable myIpChain { type nat hook prerouting priority 0; policy accept}
create chain ip myIpTable myIpChain { type nat hook input priority 0; policy accept}
create chain ip myIpTable myIpChain { type nat hook output priority 0; policy accept}
create chain ip myIpTable myIpChain { type nat hook postrouting priority 0; policy accept}
create chain ip myIpTable myIpChain { type route hook output priority 0; policy accept}

create chain ip myIpTable myIpChain { type filter hook input device "eth0" priority 0; policy accept}

create chain ip6 myIp6Table myIp6Chain 
create chain ip6 myIp6Table myIp6Chain { type filter hook prerouting priority 0; policy accept}
create chain ip6 myIp6Table myIp6Chain { type filter hook input priority 0; policy accept}
create chain ip6 myIp6Table myIp6Chain { type filter hook forward priority 0; policy accept}
create chain ip6 myIp6Table myIp6Chain { type filter hook output priority 0; policy accept}
create chain ip6 myIp6Table myIp6Chain { type filter hook postrouting priority 0; policy accept}
create chain ip6 myIp6Table myIp6Chain { type nat hook prerouting priority 0; policy accept}
create chain ip6 myIp6Table myIp6Chain { type nat hook input priority 0; policy accept}
create chain ip6 myIp6Table myIp6Chain { type nat hook output priority 0; policy accept}
create chain ip6 myIp6Table myIp6Chain { type nat hook postrouting priority 0; policy accept}
create chain ip6 myIp6Table myIp6Chain { type route hook output priority 0; policy accept}
create chain ip6 myIp6Table myIp6Chain { type filter hook input device "eth0" priority 0; policy accept}
create chain inet myInetTable myInetChain 
create chain inet myInetTable myInetChain { type filter hook prerouting priority 0; policy accept}
create chain inet myInetTable myInetChain { type filter hook input priority 0; policy accept}
create chain inet myInetTable myInetChain { type filter hook forward priority 0; policy accept}
create chain inet myInetTable myInetChain { type filter hook output priority 0; policy accept}
create chain inet myInetTable myInetChain { type filter hook postrouting priority 0; policy accept}
create chain inet myInetTable myInetChain { type nat hook prerouting priority 0; policy accept}
create chain inet myInetTable myInetChain { type nat hook input priority 0; policy accept}
create chain inet myInetTable myInetChain { type nat hook output priority 0; policy accept}
create chain inet myInetTable myInetChain { type nat hook postrouting priority 0; policy accept}
create chain inet myInetTable myInetChain { type route hook output priority 0; policy accept}
create chain inet myInetTable myInetChain { type filter hook input device "eth0" priority 0; policy accept}

add chain myIpTable myIpChain 
add chain myIpTable myIpChain { type filter hook input priority 0; policy drop;}
add chain myIpTable myIpChain { type filter hook input device "eth0" priority 0; policy drop;}
add chain arp myArpTable myArpChain 
add chain arp myArpTable myArpChain { type filter hook input priority 0; policy drop;}
add chain arp myArpTable myArpChain { type filter hook output priority 0; policy drop;}
add chain arp myArpTable myArpChain { type filter hook input device "eth0" priority 0; policy reject;}
add chain arp myArpTable myArpChain { type filter hook output device "eth0" priority 0; policy accept;}
add chain bridge myBridgeTable myBridgeChain 
add chain bridge myBridgeTable myBridgeChain { type filter hook input priority 0; policy drop;}
add chain bridge myBridgeTable myBridgeChain { type filter hook output priority 0; policy drop;}
add chain bridge myBridgeTable myBridgeChain { type filter hook prerouting priority 0; policy drop;}
add chain bridge myBridgeTable myBridgeChain { type filter hook postrouting priority 0; policy drop;}
add chain bridge myBridgeTable myBridgeChain { type filter hook input device "eth0" priority 0; policy drop;}
add chain netdev myNetdevTable myNetdevTable 
add chain netdev myNetdevTable myNetdevChain { type filter hook ingress device "eth0" priority 0; policy drop;}
add chain ip myIpTable myIpChain 
add chain ip myIpTable myIpChain { type filter hook input priority 0; policy accept}
add chain ip myIpTable myIpChain { type filter hook input device "eth0" priority 0; policy drop;}
add chain ip6 myIp6Table myIp6Chain 
add chain ip6 myIp6Table myIp6Chain { type filter hook input priority 0; policy accept}
add chain ip6 myIp6Table myIp6Chain { type filter hook prerouting priority 0; policy accept}
add chain ip6 myIp6Table myIp6Chain { type filter hook forward priority 0; policy accept}
add chain ip6 myIp6Table myIp6Chain { type filter hook output priority 0; policy accept}
add chain ip6 myIp6Table myIp6Chain { type filter hook postrouting priority 0; policy accept}
add chain ip6 myIp6Table myIp6Chain { type nat hook prerouting priority 0; policy accept}
add chain ip6 myIp6Table myIp6Chain { type nat hook input priority 0; policy accept}
add chain ip6 myIp6Table myIp6Chain { type nat hook output priority 0; policy accept}
add chain ip6 myIp6Table myIp6Chain { type nat hook postrouting priority 0; policy accept}
add chain ip6 myIp6Table myIp6Chain { type route hook output priority 0; policy accept}
add chain ip6 myIp6Table myIp6Chain { type filter hook input device "eth0" priority 0; policy drop;}
add chain inet myInetTable myInetChain 
add chain inet myInetTable myInetChain { type filter hook prerouting priority 0; policy accept}
add chain inet myInetTable myInetChain { type filter hook input priority 0; policy accept}
add chain inet myInetTable myInetChain { type filter hook forward priority 0; policy accept}
add chain inet myInetTable myInetChain { type filter hook output priority 0; policy accept}
add chain inet myInetTable myInetChain { type filter hook postrouting priority 0; policy accept}
add chain inet myInetTable myInetChain { type filter hook prerouting priority 0; policy accept}
add chain inet myInetTable myInetChain { type nat hook input priority 0; policy accept}
add chain inet myInetTable myInetChain { type nat hook output priority 0; policy accept}
add chain inet myInetTable myInetChain { type nat hook postrouting priority 0; policy accept}
add chain inet myInetTable myInetChain { type route hook output priority 0; policy accept}
add chain inet myInetTable myInetChain { type filter hook input device "eth0" priority 0; policy drop;}

add rule inet mytable myin counter

add set myIpTable mySet { type mark; flags interval; timeout 15m; gc-interval 2d; elements = element,element; size 1200; policy default; auto-merge; }
add set ip myIpTable mySet {   # comment
    type inet_proto;   # comment
    flags constant;   # comment
    timeout 30s;   # comment
    gc-interval 2h;   # comment
    elements = element,element;   # comment
    size 1200;   # comment
    policy memory;   # comment
    auto-merge;   # comment
    };  # comment
add set netdev myNetdevTable myNetdevSet { type mark; flags interval; timeout 15m; gc-interval 2d; elements = element,element; size 1200; policy default; auto-merge; }
add set bridge myBridgeTable myBridgeSet { type mark; flags interval; timeout 15m; gc-interval 2d; elements = element,element; size 1200; policy default; auto-merge; }
add set arp myArpTable myArpSet { type mark; flags interval; timeout 15m; gc-interval 2d; elements = element,element; size 1200; policy default; auto-merge; }
add set ip myIpTable myIpSet { type mark; flags interval; timeout 15m; gc-interval 2d; elements = element,element; size 1200; policy default; auto-merge; }
add set ip6 myIp6Table myIp6Set { type mark; flags interval; timeout 15m; gc-interval 2d; elements = element,element; size 1200; policy default; auto-merge; }
add set inet myInetTable myInetSet { type mark; flags interval; timeout 15m; gc-interval 2d; elements = element,element; size 1200; policy default; auto-merge; }

add element myIpTable myIpSet { element, element }
add element netdev myNetdevTable myNetdevSet { element, element }
add element bridge myBridgeTable myBridgeSet { element, element }
add element arp myArpTable myArpSet { element, element }
add element ip myIpTable myIpSet { element, element }
add element ip6 myIp6Table myIp6Set { element, element }
add element inet myInetTable myInetSet { element, element }

add map myIpTable myIpMap { type mark; flags interval; elements = { element,element }; size 1200; policy default; }
add map netdev myNetdevTable myNetdevMap { type mark; flags interval; elements = { element,element }; size 1200; policy default; }
add map bridge myBridgeTable myBridgeMap { type mark; flags interval; elements = { element,element }; size 1200; policy default; }
add map arp myArpTable myArpMap { type mark; flags interval; elements = { element,element }; size 1200; policy default; }
add map ip myIpTable myIpMap { type mark; flags interval; elements = { element,element }; size 1200; policy default; }
add map ip6 myIp6Table myIp6Map { type mark; flags interval; elements = { element,element }; size 1200; policy default; }
add map inet myInetTable myInetMap { type mark; flags interval; elements = { element,element }; size 1200; policy default; }

add element myIpTable myIpMap { elements = { element, element }; }
add element netdev myNetdevTable myNetdevMap { elements = { element, element } ; }
add element bridge myBridgeTable myBridgeMap { elements = { element, element } ; }
add element arp myArpTable myArpMap { elements = { element, element } ; }
add element ip myIpTable myIpMap { elements = { element, element } ; }
add element ip6 myIp6Table myIp6Map { elements = { element, element } ; }
add element inet myInetTable myInetMap { elements = { element, element } ; }

create flowtable myIpTable myIpFT { hook input priority 0; devices = { device,device,device} ; }
create flowtable ip myIpTable myIpFT { hook input priority 0; devices = { device, device } ; }
create flowtable ip6 myIp6Table myIp6FT { hook input priority 0; devices = { device, device } ; }
create flowtable inet myInetTable myInetFT { hook input priority 0; devices = { device, device } ; }

add flowtable myIpTable myIpFT { hook input priority 0; devices = { device,device } ; }
add flowtable ip myIpTable myIpFT { hook input priority 0; devices = { device,device } ; }
add flowtable ip6 myIp6Table myIp6FT { hook input priority 0; devices = { device,device } ; }
add flowtable inet myInetTable myInetFT { hook input priority 0; devices = { device,device } ; }

add type myIpTable myIpType
add type netdev myNetdevTable myNetdevType
add type bridge myBridgeTable myBridgeType
add type arp myArpTable myArpType
add type ip myIpTable myIpType
add type ip6 myIp6Table myIp6Type
add type inet myInetTable myInetType

rename chain myIpTable myIpChain newMyIpChain
rename chain netdev myNetdevTable myNetdevChain newMyNetdevChain    ;    
rename chain bridge myBridgeTable myBridgeChain newMyBridgeChain;
rename chain arp myArpTable myArpChain newMyArpChain  ;
rename chain ip myIpTable myIpChain newMyIpChain    ;    # comment
rename chain ip6 myIp6Table myIp6Chain newMyIp6Chain  # comment
rename chain inet myInetTable myInetChain newMyInetChain

list ruleset   
list ruleset  ;  
list ruleset netdev
list ruleset bridge
list ruleset arp
list ruleset ip
list ruleset ip6
list ruleset inet

list tables

list table netdev TABLE_NETDEV
list table bridge TABLE_NETDEV
list table arp TABLE_NETDEV
list table ip TABLE_NETDEV
list table ip6 TABLE_NETDEV
list table inet TABLE_NETDEV

list chains

list chain myIpTable myIpChain ; 
list chain netdev myNetdev myNetdevchain
list chain bridge myBridge myBridgechain
list chain arp myArp myArpchain
list chain ip myIp myIpchain
list chain ip6 myIp6 myIp6chain
list chain inet myInet myInetchain

list sets

list set TABLE_NETDEV SET_NETDEV
list set ip myIpTable myIpSet
list set netdev myNetdevTable myNetdevSet
list set bridge myBridgeTable myBridgeSet
list set arp myArpTable myArpSet
list set ip myIpTable myIpSet
list set ip6 myIp6Table myIp6Set
list set inet myInetTable myInetSet

list map myIpTable myIpMap 
list map netdev myNetdevTable myNetdevMap 
list map bridge myBridgeTable myBridgeMap 
list map arp myArpTable myArpMap 
list map ip myIpTable myIpMap 
list map ip6 myIp6Table myIp6Map 
list map inet myInetTable myInetMap 

list \
    flowtable \
        myIpTable \
            myIpFT
list flowtable ip myIpTable myIpFT
list flowtable ip6 myIp6Table myIp6FT
list flowtable inet myInetTable myInetFT

list type myIpTable myIpType
list type netdev myNetdevTable myNetdevType
list type bridge myBridgeTable myBridgeType
list type arp myArpTable myArpType
list type ip myIpTable myIpType
list type ip6 myIp6Table myIp6Type
list type inet myInetTable myInetType

flush map myIpTable myIpMap 
flush map netdev myNetdevTable myNetdevMap 
flush map bridge myBridgeTable myBridgeMap 
flush map arp myArpTable myArpMap 
flush map ip myIpTable myIpMap 
flush map ip6 myIp6Table myIp6Map 
flush map inet myInetTable myInetMap 

flush set myIpTable mySet
flush set netdev myNetdevTable mySet
flush set bridge myBridgeTable mySet
flush set arp myArpTable mySet
flush set ip myIpTable mySet
flush set ip6 myIp6Table mySet
flush set inet myInetTable mySet ; 

ct helper myHelper { type myFtp protocol tcp ; l3proto ip }

counter <packets> <bytes>

quota 15mbytes
quota over 30kbytes
quota until 5bytes


export json
export xml
export ruleset json
export ruleset xml

describe tcp flag; # oopsie

reset type myIpTable myIpType
reset type netdev myNetdevTable myNetdevType
reset type bridge myBridgeTable myBridgeType
reset type arp myArpTable myArpType
reset type ip myIpTable myIpType
reset type ip6 myIp6Table myIp6Type
reset type inet myInetTable myInetType

delete type myIpTable myIpType
delete type netdev myNetdevTable myNetdevType
delete type bridge myBridgeTable myBridgeType
delete type arp myArpTable myArpType
delete type ip myIpTable myIpType
delete type ip6 myIp6Table myIp6Type
delete type inet myInetTable myInetType
delete type inet myInetTable handle 3

delete flowtable myIpTable myIpFT
delete flowtable ip myIpTable myIpFT
delete flowtable ip6 myIp6Table myIp6FT
delete flowtable inet myInetTable myInetFT

delete element myIpTable myIpSet { element, element }
delete element netdev myNetdevTable myNetdevSet { element, element }
delete element bridge myBridgeTable myBridgeSet { element, element }
delete element arp myArpTable myArpSet { element, element }
delete element ip myIpTable myIpSet { element, element }
delete element ip6 myIp6Table myIp6Set { element, element }
delete element inet myInetTable myInetSet { element, element }

delete element myIpTable myIpMap { elements = { element, element }; }
delete element netdev myNetdevTable myNetdevMap { elements = { element, element } ; }
delete element bridge myBridgeTable myBridgeMap { elements = { element, element } ; }
delete element arp myArpTable myArpMap { elements = { element, element } ; }
delete element ip myIpTable myIpMap { elements = { element, element } ; }
delete element ip6 myIp6Table myIp6Map { elements = { element, element } ; }
delete element inet myInetTable myInetMap { elements = { element, element } ; }


delete map myIpTable myIpMap 
delete map netdev myNetdevTable myNetdevMap 
delete map bridge myBridgeTable myBridgeMap 
delete map arp myArpTable myArpMap 
delete map ip myIpTable myIpMap 
delete map ip6 myIp6Table myIp6Map 
delete map inet myInetTable myInetMap 

delete set myIpTable myIpSet
delete set netdev myNetdevTable mySet
delete set bridge myBridgeTable myBridgeSet
delete set arp myArpTable myArpSet
delete set ip myIpTable myIpSet
delete set ip6 myIp6Table myIp6Set
delete set inet myInetTable myInetSet
delete set myIpTable handle 123
delete set ip myIpTable handle 123
delete set inet myInetTable handle 42 # comment

delete chain myIpTable myIpChain
delete chain netdev myNetdev myNetdevChain
delete chain bridge myBridge myBridgeChain
delete chain arp myArp myArpChain
delete chain ip myIp myIpChain
delete chain ip6 myIp6 myIp6Chain
delete chain inet myInet myInetChain
delete chain myInet handle 123123
delete chain inet myInet handle 42 # comment

delete table myIpTable
delete table netdev myNetdevTable
delete table bridge myBridgeTable
delete table arp myArpTable
delete table ip myIpTable
delete table ip6 myIp6Table
delete table inet myInetTable
delete table netdev handle 123
delete table handle 4321 # comment


monitor destroy 
monitor destroy tables 
monitor destroy chains
monitor destroy sets
monitor destroy rules
monitor destroy elements
monitor destroy trace 

table arp A0b_._/RP_TABLE {
    chain ARP_INPUT_FILTER {
       type filter hook input priority 0;
       policy drop;
       counter log drop
    }
    chain ARP_INPUT_FILTER {
       type filter hook prerouting priority 0;
       policy drop;
       counter log drop
    }
    chain workstation_arp_filter_output {
        type filter hook output priority 0;
        policy drop;
        counter log drop
    }
}

table bridge workstation_bridge {
    chain workstn_bridge_filter_input {
        type filter hook input priority -200;
        policy accept
    }
    chain workstn_bridge_filter_output {
        type filter hook output priority -200;
        policy accept
    }

    chain workstn_bridge_filter_forward {
        type filter hook forward priority -200;
        # default drop on all bridge forwarding
        policy drop;

        oif eth0 ip protocol icmp icmp type echo-request accept
        iif eth0 ip protocol icmp icmp type echo-reply accept
        counter log drop
    }
}

table netdev NETDEV_TABLE {
    # mind the NIC, it must exists
    chain ingress_filter_netdev_lo { 
        type filter hook ingress device lo priority -100; 
        udp dport 53 ether saddr set aa:bb:cc:dd:ff:ee ether daddr set numgen inc mod 2 map {  0 : ca:fe:ba:be:00:00, 1: de:ad:be:ef:00:00 } fwd to eth0;
    }
    chain red_ingress_netdev_eth0 { 
        # You'll get a cryptic error if 'device eth0' is missing after 'chain'
        type filter hook ingress device eth0 priority -100; 
        policy accept;

        include "netdev-table/ingress-hook/*.eth0.rule.nft";
        tcp dport 80 ether saddr set aa:bb:cc:dd:ff:ee ether daddr set jhash ip saddr . tcp sport mod 2 map { 0 : ca:fe:ba:be:00:00, 1: de:ad:be:ef:00:00 } fwd to eth0;
        udp dport 53 ether saddr set aa:bb:cc:dd:ff:ee ether daddr set numgen inc mod 2 map {  0 : ca:fe:ba:be:00:00, 1: de:ad:be:ef:00:00 } fwd to eth0;
    }
}

table inet INET_TABLE {
define interface_name2 = "br0"
    chain workstation_inet_filter_input {
        # Things that make this chain unique (input, filter)
        type filter hook input priority 0;
        policy drop;
        iif lo accept
        # Things that make this chain unique ('eth0', input, filter)
        # meta iifname != $interface_name2 drop;  # workstation wants all intfs
        # Let things back in if they've been established before new firewall
        ct state established,related accept;
        #  DNS 
        tcp dport 53 counter accept 
        udp dport 53 counter accept 
        #  Multicast DNS 
        tcp dport 5353 counter accept
        # RFC 6092 - Simple Security in IPv6 Gateway CPE
        # recommends that the DEFAULT
        #   operating mode for residential IPv6 simple security be to treat
        #   Generic Packet Tunneling [RFC2473] and similar protocols as opaque
        #   transport layers, i.e., inbound tunnel initiations are denied and
        #   outbound tunnel initiations are accepted.

        # To facilitate the use of IPsec in support of IPv6
        # mobility, the Internet Key Exchange (IKE) protocol [RFC5996] and the
        # Host Identity Protocol (HIP) [RFC5201] should also be permitted in
        # the DEFAULT operating mode.

        #  Workstation
        icmp type {
            destination-unreachable, 
            time-exceeded, 
            parameter-problem
        } counter accept

        # Router/Gateway
        icmp type {
            destination-unreachable, 
            redirect, 
            time-exceeded, 
            parameter-problem, 
            router-advertisement, 
            router-solicitation
            } counter accept

        # All ICMP
        icmp type {
            echo-reply, 
            destination-unreachable, 
            source-quench, redirect, 
            echo-request, 
            time-exceeded, 
            parameter-problem, 
            timestamp-request, 
            timestamp-reply, 
            info-request, 
            info-reply, 
            address-mask-request, 
            address-mask-reply, 
            router-advertisement, 
            router-solicitation
            } counter accept

        tcp dport 25 counter accept    # smtp
        tcp dport 465 counter accept   # submission
        # SSH server
        tcp dport ssh counter accept 
        
        tcp dport 514 counter accept    # syslog
        tcp dport 6514 counter accept   # secured syslog

        tcp dport 80 counter accept 
        tcp dport 443 counter accept 

        # IP-specific
        # meta ip goto workstation_inet_filter_input_ip
        # meta ip6 goto workstation_inet_filter_input_ip6
        # meta vlan goto workstation_inet_filter_input_vlan
        # meta arp goto workstation_inet_filter_input_arp

        # Just in case that someone screws up our 'policy drop'

        # multi-family reject, using the icmpx keyword
        counter log reject with icmpx type admin-prohibited
    };
    # ARP filter input
    chain workstation_arp_filter_input {
        counter log reject
    }
    # ARP filter output
    chain workstation_arp_filter_output {
        #  Multicast DNS 
        tcp dport 5353 counter accept
        #  DNS 
        tcp dport 53 counter accept 
        udp dport 53 counter accept 

        #  Workstation
        icmp type {
            destination-unreachable, 
            time-exceeded, 
            parameter-problem
            } counter accept

        # Router/Gateway
        icmp type {
            destination-unreachable, 
            redirect, 
            time-exceeded, 
            parameter-problem, 
            router-advertisement, 
            router-solicitation
            } counter accept

        # All ICMP
        icmp type {
            echo-reply, 
            destination-unreachable, 
            source-quench, redirect, 
            echo-request, 
            time-exceeded, 
            parameter-problem, 
            timestamp-request, 
            timestamp-reply, 
            info-request, 
            info-reply, 
            address-mask-request, 
            address-mask-reply, 
            router-advertisement, 
            router-solicitation
            } counter accept

        tcp dport 25 counter accept    # smtp
        tcp dport 465 counter accept   # submission
        # SSH server
        tcp dport ssh counter accept 

        tcp dport 514 counter accept    # syslog
        tcp dport 6514 counter accept   # secured syslog

        tcp dport 80 counter accept 
        tcp dport 443 counter accept 

        counter log reject
    }
    #IPv6 filtering
    chain workstation_ip6_filter_input {
        counter log reject
    }
    #IPv6 filtering
    chain workstation_inet_filter_input_ip6 {
        counter log reject
    }
    #IPv6 filtering
    chain workstation_inet_filter_input_ip6 {
        counter log reject
    }
}

table ip workstn_ip_nat {
    chain workstn_ip_nat_postrouting {
        type nat hook postrouting priority 0;
        #Likewise, in iptables NAT (source NAT):
        # % iptables -t nat -A POSTROUTING -s 192.168.1.1 -j SNAT --to-source 1.1.1.1
        # % iptables -t nat -A POSTROUTING -s 192.168.2.2 -j SNAT --to-source 2.2.2.2
        # % iptables -t nat -A POSTROUTING -s 192.168.3.3 -j SNAT --to-source 3.3.3.3

        # Translated to a nftables one-liner:

        # snat ip saddr map { 
        #     192.168.1.1 : 1.1.1.1, 
        #     192.168.2.2 : 2.2.2.2, 
        #     192.168.3.3 : 3.3.3.3 
       #  }
    }
}

# SYNTAX ERRORS GOES PAST HERE
" include Filespec  # intentional syntax error
" include 'Filespec'  # intentional syntax error
" include 'Fil"espec'  # intentional syntax error
" include "Filespec" bad stuff oppsie  # intentional syntax error
" include "Filespec"  oopsie  # intentional syntax error
" include "Filespec"  oopsie  ;  # intentional syntax error
add table my\IpTable    # defaults to 'ip' family
add table my_./\IpTable    # defaults to 'ip' family
add chain arp my_/\./_ArpTable my\./_ArpChain 
flush chain myIpTable myIpChain ; flush chain netdev myNetDev X; oopsie
list oopsie
list oopsie ;
list ruleset netdev oopsie;
list tables  ;   asdf
list table TABLE_NETDEV   ; asdf
list flowtable netdev myIpTable myIpFT  # intentional syntax error
list set myIpTable handle 123 # intentional syntax error
list set inet myInetTable handle 123  # Intentional Syntax ERROR
flush set inet myInetTable handle 123  # Intentional Syntax ERROR
